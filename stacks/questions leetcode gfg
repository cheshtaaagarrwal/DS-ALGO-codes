//leetcode question 56 merge common intervals
class Solution {
    public int[][] merge(int[][] arr) {
        Stack<Pair>st=new Stack<>();
        Pair[] pairs=new Pair[arr.length];
        for(int i=0;i<arr.length;i++){
            pairs[i]=new Pair(arr[i][0],arr[i][1]);
        }
        
        Arrays.sort(pairs);
        for(int i=0;i<pairs.length;i++){
            if(i==0)
                st.push(pairs[i]);
            else{
                Pair top=st.peek();
                Pair curr=pairs[i];
                if(top.et<curr.st)
                    st.push(curr);
                else
                    top.et=Math.max(curr.et,top.et);
            }
        }
         Stack<Pair>rs=new Stack<>();
        int j=0;
        while(st.size()>0){
            rs.push(st.pop());
            j++;
        }
        int [][] merge=new int[j][2];
        for(int i=0;i<merge.length;i++){
            Pair top=rs.pop();
            merge[i][0]=top.st;
            merge[i][1]=top.et;
        }
        return merge;
    }
    public static class Pair implements Comparable<Pair>{
        int st;
        int et;
        public Pair(int st,int et){
            this.st=st;
            this.et=et;
        }
        
        public int compareTo(Pair other){
            if(this.st!=other.st)
                return this.st-other.st;
            else
                return this.et-other.et;
        }
    }
}

//leetcode question 224 Basic calculator
class Solution {
    public int calculate(String s) {
      Stack<Integer>operands=new Stack<>();
        Stack<Character> operators=new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(ch=='(')
                operators.push(ch);
            else if(Character.isDigit(ch)){
                int num = 0;
                while(i < s.length() && Character.isDigit(s.charAt(i))) {
                    num = num * 10 + (int)(s.charAt(i++) - '0');
                }
                i--;
                operands.push(num);}
                else if(ch=='+' || ch=='-'){
                    while(operators.size()!=0 && operators.peek()!='('){
                        int val2=operands.pop();
                        int val1=operands.pop();
                        char op=operators.pop();
                        int val=Operation(val1,val2,op);
                        operands.push(val);
                    }
                    operators.push(ch);
                }
         
            else if(ch==')'){
                  while(operators.size()!=0 && operators.peek()!='('){
                        int val2=operands.pop();
                        int val1=operands.pop();
                        char op=operators.pop();
                        int val=Operation(val1,val2,op);
                        operands.push(val);
                    }
                if(operators.size()>0)
                    operators.pop();
            }
            
        }
        while(operators.size()>0){
            
                        int val2=operands.pop();
                        int val1=operands.pop();
                        char op=operators.pop();
                        int val=Operation(val1,val2,op);
                        operands.push(val);
                    }
            int val=operands.pop();
            return val;
        
    }
    public static int Operation(int val1,int val2,char op){
        if(op=='+')
            return (val1 + val2);
        else
            return (val1-val2);
    }
}

//leetcode question 239 Sliding window maximum
class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
        int [] ngr=new int[arr.length];
        Stack<Integer> st=new Stack<>();
        st.push(arr.length-1);
        ngr[arr.length-1]=arr.length;
        for(int i=arr.length-2;i>=0;i--){
            while(st.size()!=0 && arr[i]>=arr[st.peek()]){
                st.pop();
            }
            if(st.size()==0)
                ngr[i]=arr.length;
            else
                ngr[i]=st.peek();
            st.push(i);
        }
        int j=0;
         int l=0;
        int[] maxwindow = new int[arr.length-k+1];
        for(int i=0;i<=arr.length-k;i++){
            if(j<i)
                j=i;
            while(ngr[j]<i+k){
                j=ngr[j];
            }
           
        if(l<maxwindow.length){
            maxwindow[l]=arr[j];
            l++;
        }
        }
       
    return maxwindow;
    }
}

//gfg Evaluation to postfix
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner scn=new Scanner(System.in);
		int t=scn.nextInt();
	
		for(int i=0;i<t;i++){
		    String str=scn.next();
		   postfix(str);
		}
	}
	public static void postfix(String str){
	    Stack<Integer>st=new Stack<>();
	    for(int i=0;i<str.length();i++){
	        char ch=str.charAt(i);
	        
	        if(ch=='+' || ch=='-' || ch=='*' || ch=='/'){
	            int val2=st.pop();
	            int val1=st.pop();
	            int val=operation(val1,val2,ch);
	            st.push(val);
	        }
	        else
	        st.push(ch-'0');
	    }
	    int val=st.pop();
	    System.out.println(val);
	}
	public static int operation(int val1,int val2,char ch){
	    if(ch=='+')
	    return val1+val2;
	    else if(ch=='-')
	    return val1-val2;
	    else if(ch=='/')
	    return val1/val2;
	    else
	    return val1*val2;
	}
}

//gfg maximum area of a histogram
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner scn=new Scanner(System.in);
		int t=scn.nextInt();
		for(int i=0;i<t;i++){
		    int n=scn.nextInt();
		    int arr[]=new int [n];
		    for(int j=0;j<n;j++){
		        arr[j]=scn.nextInt();
		    }
		    Area(arr,n);
		}
	}
	public static void Area(int []arr,int n){
	    int [] nsr=new int [n];
	    Stack<Integer>st=new Stack<>();
	    nsr[arr.length-1]=arr.length;
	    st.push(arr.length-1);
	    for(int i=arr.length-2;i>=0;i--){
	        while(st.size()!=0 && arr[i]<=arr[st.peek()]){
	            st.pop();
	        }
	        if(st.size()==0){
	            nsr[i]=arr.length;
	        }
	        else{
	            nsr[i]=st.peek();
	        }
	        st.push(i);
	    }
	    int [] nsl=new int [n];
	    Stack<Integer>st1=new Stack<>();
	    nsl[0]=-1;
	    st1.push(0);
	    for(int i=1;i<arr.length;i++){
	        while(st1.size()!=0 && arr[i]<=arr[st1.peek()]){
	            st1.pop();
	        }
	        if(st1.size()==0){
	            nsl[i]=-1;
	        }
	        else{
	            nsl[i]=st1.peek();
	        }
	        st1.push(i);
	    }
	    int maxArea=0;
	    for(int i=0;i<arr.length;i++){
	        int width=nsr[i]-nsl[i]-1;
	        int area=width*arr[i];
	        if(area>maxArea)
	        maxArea=area;
	    }
	    System.out.println(maxArea);
	}
}

//gfg infix to postfix
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner scn=new Scanner(System.in);
		int t=scn.nextInt();
		for(int i=0;i<t;i++)
		{
		    String str=scn.next();
		    Postfix(str);
		}
	}
public static void Postfix(String str){
    Stack<Character>operators=new Stack<>();
    Stack<String> post=new Stack<>();
    for(int i=0;i<str.length();i++){
        char ch=str.charAt(i);
        if(ch=='(')
        operators.push(ch);
        else if((ch >='0' && ch <= '9') || (ch >='a' && ch <= 'z') || (ch >='A' && ch <= 'Z')){
            post.push(ch+"");
        }
        else if(ch=='+' || ch=='-'|| ch=='*' || ch=='/' || ch=='^'){
            while(operators.size()!=0 && operators.peek()!='(' && Precedence(ch)<=Precedence(operators.peek())){
                String val2=post.pop();
                String val1=post.pop();
                char op=operators.pop();
                post.push(val1+val2+op);
                
            }
            operators.push(ch);
        }
        else if(ch==')'){
            while(operators.size()!=0 && operators.peek()!='(')
            {
                  String val2=post.pop();
                String val1=post.pop();
                char op=operators.pop();
                post.push(val1+val2+op);
            }
            if(operators.size()>0)
            operators.pop();
        }
    }
    while(operators.size()!=0){
         String val2=post.pop();
                String val1=post.pop();
                char op=operators.pop();
                post.push(val1+val2+op);
    }
    String val=post.pop();
    System.out.println(val);
}
	public static int Precedence(char op){
	    if(op=='+')
	    return 1;
	    else if(op=='-')
	    return 1;
	    else 
	    return 2;
	}
}

//gfg stock span problem
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
	    Scanner scn=new Scanner(System.in);
		int t=scn.nextInt();
		for(int i=0;i<t;i++){
		    int n=scn.nextInt();
		    int arr[]=new int [n];
		    for(int j=0;j<n;j++){
		        arr[j]=scn.nextInt();
		    }
		    int []span=Spockspan(arr);
		  for(int j=0;j<n;j++){
		       System.out.print(span[j]+" ");
		      
		    }
		 
		     System.out.println();
		    
		}
	}
	public static int [] Spockspan(int arr[]){
	    Stack<Integer> st=new Stack<>();
	    int span[]=new int[arr.length];
	  st.push(0);
	    span[0]=1;
	    for(int i=1;i<arr.length;i++){
	        while(st.size()!=0 && arr[i]>=arr[st.peek()]){
	            st.pop();
	        }
	        if(st.size()==0)
	        span[i]=i+1;
	        else
	        span[i]=i-st.peek();
	        st.push(i);
	    }
	    		  return span;
	}
}

//gfg celebrity problem

class Celebrity
{
    // The task is to complete this function
    int getId(int M[][], int n)
    {
        // Your code here
         Stack<Integer>st=new Stack<>();
    for(int i=0;i<M.length;i++)
    st.push(i);
    
    while(st.size()>1){
        int i=st.pop();
        int j=st.pop();
        if(M[i][j]==1)
        st.push(j);
        else 
        st.push(i);
    }
    int pot=st.pop();
     boolean flag = true;
        for(int i = 0; i < M.length; i++){
           if(i != pot){
              if(M[i][pot] == 0 || M[pot][i] == 1){
                 flag = false;
                 break;
              }
           }
        }

        if(flag){
          return pot;
        } else {
           return -1;
        }
    }
}

//gfg next larger element
#include <iostream>
#include<stack>
#include <vector>
using namespace std;
void ngor(vector<long> &arr){
    vector<int> ans(arr.size(),arr.size());
    stack<int> st;
    for(int i=0;i<arr.size();i++){
        while(st.size()!=0 && arr[st.top()]<arr[i]){
            ans[st.top()]=i;
            st.pop();
        }
        st.push(i);
    }
    for(int i=0;i<ans.size();i++)
    {
        if(ans[i]>arr.size()-1)
        cout<<"-1 ";
    else cout<<arr[ans[i]]<<" ";
    }
    cout<<endl;
}
int main() {
    int t;
	cin>>t;
	for(int i=0;i<t;i++){
	    int n;
	    cin>>n;
	    vector<long>ans(n,0);
	    for(int j=0;j<n;j++)
	    cin>>ans[j];
	    ngor(ans);
	}
	return 0;
}

//gfg parenthesis checker
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
	    Scanner scn=new Scanner(System.in);
	       int t=scn.nextInt();
	       for(int i=0;i<t;i++){
	           String str=scn.next();
	           Balanced(str);
	       }
	}
	public static void Balanced(String str){
	    Stack<Character> st=new Stack<>();
	    for(int i=0;i<str.length();i++){
	        char ch=str.charAt(i);
	        if(ch=='(' || ch=='{' || ch=='[')
	        st.push(ch);
	        else if(ch==')'){
	            if(st.size()==0 || st.peek()!='('){
	            System.out.println( "not balanced");
	            return;
	                
	            }
	            else
	            st.pop();
	            
	        }
	        else if(ch=='}'){
	            if(st.size()==0 || st.peek()!='{'){
	            System.out.println( "not balanced");
	            return;
	            }
	            else
	            st.pop();
	            
	        }
	        else if(ch==']'){
	            if(st.size()==0 || st.peek()!='['){
	            System.out.println( "not balanced");
	            return;}
	            else
	            st.pop();
	            
	        }
	    }
	    if(st.size()==0)
	    System.out.println("balanced");
	    else 
	    System.out.println("not balanced");
	}
}